#! /usr/bin/env racket
#lang racket

(require racket/system)
(require gregor)

(require "lib.rkt")

(define output-str (with-output-to-string (Î» () (system "systemctl --user show daily-chores.service"))))

(define (remove-timestamp time_str)
  (string-join (reverse (rest (reverse (string-split(first time_str) " " #:trim? #t #:repeat? #t)))))
  )

(define now (current-seconds))

(define (time-str->epoch time-str)
  (define parsed_time (parse-datetime time-str "E yyyy-MM-dd HH:mm:ss"))
  (- (->posix parsed_time) (* 60 60 9)) ;; GMT+9
)

(define (run-daily-chores)
  (println "Runs daily-chores.service")
  (system "systemctl --user start daily-chores.service")
)

(define (foo val)
  (define ago (- (current-seconds) (time-str->epoch (remove-timestamp val))))
  (if (> ago  (* 60 60 24))
      (run-daily-chores)
      (println (format "Ran daiy-chores.service <~a>hours ago nothing to do" (roundn (exact->inexact (/ ago 60 60)) 1)))
  )
)

(define a '())

(for ([e (in-list (string-split output-str "\n" #:trim? #t #:repeat? #t))])
  (define key (first (string-split e "=" #:trim? #t #:repeat? #f)))
  (define val (rest (string-split e "=" #:trim? #t #:repeat? #f)))
  (if (equal? key "ExecMainExitTimestamp") (set! a val) '())
)

(if (equal? a '()) (println "ExecMainExitTimestamp not found. Is it running now?") (foo a))



    






;; raco exe -o ./bin/daily-chores-checker daily-chores-checker.rkt
;; raco make daily-chores-checker.rkt





